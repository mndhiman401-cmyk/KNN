# -*- coding: utf-8 -*-
"""d33-εr-Tc.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cUashQfbOUwjJeQ-_paTLxPS4caSsEDS
"""

import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error, mean_absolute_percentage_error
import numpy as np

file_path = 'd33 for ML-Final Used.xlsx'

# Load datasets
training = pd.read_excel(file_path, sheet_name='Training')
testing = pd.read_excel(file_path, sheet_name='Testing')

# Separate features and target variable
X_train = training.drop(columns=['Y'])
y_train = training['Y']
X_test = testing.drop(columns=['Y'])
y_test = testing['Y']

# Identify categorical columns
categorical_cols = ['B', 'C']

# Apply one-hot encoding
X_train = pd.get_dummies(X_train, columns=categorical_cols, drop_first=True)
X_test = pd.get_dummies(X_test, columns=categorical_cols, drop_first=True)

# Align columns
X_test = X_test.reindex(columns=X_train.columns, fill_value=0)

# Normalize features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

print("Training Data:", X_train.shape)
print("Testing Data:", X_test.shape)

"""**1. Linear Regression Model**"""

from sklearn.linear_model import Ridge

ridge = Ridge(alpha=5.0)  # You can tune alpha
ridge.fit(X_train, y_train)

y_train_pred = ridge.predict(X_train)
y_test_pred = ridge.predict(X_test)

from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error, mean_absolute_percentage_error
import numpy as np

print("Training R2:", r2_score(y_train, y_train_pred),
      "RMSE:", np.sqrt(mean_squared_error(y_train, y_train_pred)),
      "MAE:", mean_absolute_error(y_train, y_train_pred),
      "MAPE:", mean_absolute_percentage_error(y_train, y_train_pred)*100)

print("Testing R2:", r2_score(y_test, y_test_pred),
      "RMSE:", np.sqrt(mean_squared_error(y_test, y_test_pred)),
      "MAE:", mean_absolute_error(y_test, y_test_pred),
      "MAPE:", mean_absolute_percentage_error(y_test, y_test_pred)*100)

"""**2. SVR**"""

import numpy as np
import pandas as pd
from sklearn.svm import SVR
from sklearn.model_selection import RandomizedSearchCV, KFold
from sklearn.metrics import (
    r2_score, mean_squared_error, mean_absolute_error,
    mean_absolute_percentage_error, make_scorer
)
from scipy.stats import uniform, randint
svr = SVR(kernel="poly")
param_distributions = {
    "C": [0.1, 1, 10, 25, 50, 100, 500],
    "degree": [2, 3, 4, 5],
    "gamma": ["scale", "auto", 0.001, 0.01, 0.1, 1],
    "coef0": [0, 0.1, 1, 10],
    "epsilon": [0.01, 0.05, 0.1, 0.2, 0.5, 1],
    "tol": [1e-4, 1e-3, 1e-2]
}
cv = KFold(n_splits=10, shuffle=True, random_state=42)
scorer = make_scorer(r2_score)
random_search = RandomizedSearchCV(
    estimator=svr,
    param_distributions=param_distributions,
    n_iter=50,                # number of random parameter samples
    scoring=scorer,
    n_jobs=-1,                # use all CPU cores
    cv=cv,
    random_state=42,
    verbose=2
)
random_search.fit(X_train, y_train)

print("Best Parameters:", random_search.best_params_)
print("Best CV Score (R²):", random_search.best_score_)
best_svr = random_search.best_estimator_
best_svr.fit(X_train, y_train)
# Predictions
Y_train_svr = best_svr.predict(X_train)
Y_test_svr = best_svr.predict(X_test)
def evaluate_model(y_true, y_pred, dataset_name):
    print(f"\n{dataset_name} Performance:")
    print("  R2:", r2_score(y_true, y_pred))
    print("  RMSE:", np.sqrt(mean_squared_error(y_true, y_pred)))
    print("  MAE:", mean_absolute_error(y_true, y_pred))
    print("  MAPE (%):", mean_absolute_percentage_error(y_true, y_pred) * 100)

evaluate_model(y_train, Y_train_svr, "Training")
evaluate_model(y_test, Y_test_svr, "Testing")

"""**3. Decision Tree Regressor**"""

import numpy as np
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import GridSearchCV, RandomizedSearchCV, KFold
from sklearn.metrics import (
    r2_score, mean_squared_error,
    mean_absolute_error, mean_absolute_percentage_error
)
dt_model = DecisionTreeRegressor(random_state=42)
param_grid = {
    'min_samples_split': list(range(2, 11)),
    'max_depth': list(range(1, 14, 2)),
    'min_samples_leaf': list(range(1, 11)),
    'max_leaf_nodes': list(range(10, 101, 10))
}
cv = KFold(n_splits=10, shuffle=True, random_state=42)
grid_dt = GridSearchCV(
    estimator=dt_model,
    param_grid=param_grid,
    scoring='r2',
    cv=cv,
    n_jobs=-1
)
grid_dt.fit(X_train, y_train)

print("Best Parameters (GridSearch):", grid_dt.best_params_)
best_dt = grid_dt.best_estimator_
Y_train_dt = best_dt.predict(X_train)
Y_test_dt = best_dt.predict(X_test)
print("\nTraining Performance:")
print("R2:", r2_score(y_train, Y_train_dt))
print("RMSE:", np.sqrt(mean_squared_error(y_train, Y_train_dt)))
print("MAE:", mean_absolute_error(y_train, Y_train_dt))
print("MAPE:", mean_absolute_percentage_error(y_train, Y_train_dt) * 100)
print("\nTesting Performance:")
print("R2:", r2_score(y_test, Y_test_dt))
print("RMSE:", np.sqrt(mean_squared_error(y_test, Y_test_dt)))
print("MAE:", mean_absolute_error(y_test, Y_test_dt))
print("MAPE:", mean_absolute_percentage_error(y_test, Y_test_dt) * 100)

random_dt = RandomizedSearchCV(
    estimator=dt_model,
    param_distributions=param_grid,
    n_iter=300,
    scoring='r2',
    cv=cv,
    random_state=42,
    n_jobs=-1
)
random_dt.fit(X_train, y_train)
print("\nBest Parameters (RandomizedSearch):", random_dt.best_params_)

"""**4. Random Forest Regressor**"""

import numpy as np
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV, RandomizedSearchCV, KFold
from sklearn.metrics import (
    r2_score, mean_squared_error,
    mean_absolute_error, mean_absolute_percentage_error
)
rfr = RandomForestRegressor(random_state=42)
param_grid = {
    'n_estimators': list(range(2, 101, 2)),  # avoid 0 since n_estimators=0 is invalid
    'max_features': [2, 4, 6],
    'max_depth': [4, 10, 12, 16]
}
cv = KFold(n_splits=10, shuffle=True, random_state=42)
grid_rfr = GridSearchCV(
    estimator=rfr,
    param_grid=param_grid,
    scoring='r2',
    cv=cv,
    n_jobs=-1
)
grid_rfr.fit(X_train, y_train)
print("Best Parameters (GridSearch):", grid_rfr.best_params_)
best_rfr = grid_rfr.best_estimator_
Y_train_rfr = best_rfr.predict(X_train)
Y_test_rfr = best_rfr.predict(X_test)
print("\nTraining Performance:")
print("R2:", r2_score(y_train, Y_train_rfr))
print("RMSE:", np.sqrt(mean_squared_error(y_train, Y_train_rfr)))
print("MAE:", mean_absolute_error(y_train, Y_train_rfr))
print("MAPE:", mean_absolute_percentage_error(y_train, Y_train_rfr) * 100)
print("\nTesting Performance:")
print("R2:", r2_score(y_test, Y_test_rfr))
print("RMSE:", np.sqrt(mean_squared_error(y_test, Y_test_rfr)))
print("MAE:", mean_absolute_error(y_test, Y_test_rfr))
print("MAPE:", mean_absolute_percentage_error(y_test, Y_test_rfr) * 100)
random_rfr = RandomizedSearchCV(
    estimator=rfr,
    param_distributions=param_grid,
    n_iter=250,
    scoring='r2',
    cv=cv,
    random_state=42,
    n_jobs=-1
)
random_rfr.fit(X_train, y_train)
print("\nBest Parameters (RandomizedSearch):", random_rfr.best_params_)

"""**5. Gradient Boosting Regressor**"""

import numpy as np
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import GridSearchCV, RandomizedSearchCV, KFold
from sklearn.metrics import (
    r2_score, mean_squared_error,
    mean_absolute_error, mean_absolute_percentage_error
)
gradboost = GradientBoostingRegressor(random_state=11)
param_grid = {
    'n_estimators': list(range(20, 601, 20)),  # start at 20 (0 is invalid)
    'learning_rate': [0.02, 0.05, 0.1, 0.2],
    'max_depth': [3, 4, 5, 6]
}
cv = KFold(n_splits=10, shuffle=True, random_state=11)
grid_gradboost = GridSearchCV(
    estimator=gradboost,
    param_grid=param_grid,
    scoring='r2',
    cv=cv,
    n_jobs=-1
)
grid_gradboost.fit(X_train, y_train)

print("Best Parameters (GridSearch):", grid_gradboost.best_params_)
best_gradboost = grid_gradboost.best_estimator_
Y_train_gb = best_gradboost.predict(X_train)
Y_test_gb = best_gradboost.predict(X_test)
print("\nTraining Performance:")
print("R2:", r2_score(y_train, Y_train_gb))
print("RMSE:", np.sqrt(mean_squared_error(y_train, Y_train_gb)))
print("MAE:", mean_absolute_error(y_train, Y_train_gb))
print("MAPE:", mean_absolute_percentage_error(y_train, Y_train_gb) * 100)
print("\nTesting Performance:")
print("R2:", r2_score(y_test, Y_test_gb))
print("RMSE:", np.sqrt(mean_squared_error(y_test, Y_test_gb)))
print("MAE:", mean_absolute_error(y_test, Y_test_gb))
print("MAPE:", mean_absolute_percentage_error(y_test, Y_test_gb) * 100)
random_gradboost = RandomizedSearchCV(
    estimator=gradboost,
    param_distributions=param_grid,
    n_iter=20,   # number of random combinations
    scoring='r2',
    cv=cv,
    random_state=11,
    n_jobs=-1
)
random_gradboost.fit(X_train, y_train)

print("\nBest Parameters (RandomizedSearch):", random_gradboost.best_params_)

"""**6. XGBoost**"""

import numpy as np
import xgboost as xgb
from sklearn.model_selection import GridSearchCV, KFold
from sklearn.metrics import (
    r2_score, mean_squared_error, mean_absolute_error,
    mean_absolute_percentage_error
)
xgboost_model = xgb.XGBRegressor(
    objective="reg:squarederror",
    random_state=42,
    n_jobs=-1
)
param_grid = {
    "n_estimators": list(range(50, 501, 50)),   # avoid 0 trees
    "learning_rate": [0.02, 0.05, 0.1, 0.2],
    "max_depth": [3, 4, 5, 6]
}
cv = KFold(n_splits=5, shuffle=True, random_state=42)
grid_xgboost = GridSearchCV(
    estimator=xgboost_model,
    param_grid=param_grid,
    scoring="r2",
    cv=cv,
    n_jobs=-1,
    verbose=2
)
grid_xgboost.fit(X_train, y_train)
print("Best Parameters:", grid_xgboost.best_params_)
print("Best CV R² Score:", grid_xgboost.best_score_)
best_xgb = grid_xgboost.best_estimator_

Y_train_xgb = best_xgb.predict(X_train)
Y_test_xgb = best_xgb.predict(X_test)
def evaluate_model(y_true, y_pred, dataset_name):
    print(f"\n{dataset_name} Performance:")
    print("  R2:", r2_score(y_true, y_pred))
    print("  RMSE:", np.sqrt(mean_squared_error(y_true, y_pred)))
    print("  MAE:", mean_absolute_error(y_true, y_pred))
    print("  MAPE (%):", mean_absolute_percentage_error(y_true, y_pred) * 100)
evaluate_model(y_train, Y_train_xgb, "Training")
evaluate_model(y_test, Y_test_xgb, "Testing")